install.packages("tidyverse")
library(tidyverse)
dataset_state <- state.x77
View(dataset_state)
dataset_state <- state.x77
View(dataset_state)
cor(dataset_state$Income, dataset_state$`HS Grad`)
cor(dataset_state$Income, dataset_state$HS Grad)
cor(dataset_state$Income, dataset_state$`HS Grad`)
cor(dataset_state$Income, dataset_state$'HS Grad')
cor(dataset_state$`Income`, dataset_state$`HS Grad`)
cor(dataset_state$`Income`, dataset_state$`HS Grad`)
cor(dataset_state$`Income`, dataset_state$`HS Grad`)
cor(dataset_state$`Income`, dataset_state$`HS Grad`)
dataset_state <- state.x77
cor(dataset_state$`Income`, dataset_state$`HS Grad`)
names(dataset_state)
dataset_state <- state.x77
names(dataset_state)
column(dataset_state)
View(dataset_state)
dataset_state <- as.data.frame(state.x77)
cor(dataset_state$Income, dataset_state$`HS Grad`)
cor(dataset_state$Illiteracy, dataset_state$Murder)
cor(dataset_state$Income, dataset_state$`HS Grad`, method = "spearman")
cor(dataset_state$Income, dataset_state$`HS Grad`, method = "Kandell")
cor(dataset_state$Income, dataset_state$`HS Grad`, method ="Kendall")
cor(dataset_state$Income, dataset_state$`HS Grad`, method ="Kendal")
cor(dataset_state$Income, dataset_state$`HS Grad`, method = "kendall")
cor(dataset_state$Income, dataset_state$`HS Grad`)
View(dataset_state)
View(dataset_state)
View(dataset_state)
formula <- Income ~  Population +
Illiteracy +
`Life Exp` +
Murder     +
`HS Grad`  +
Frost      +
Area
linearmodel_income (formu, data = dataset_state)
linearmodel_income <-  lm(formu, data = dataset_state)
linearmodel_income <-  lm(formula, data = dataset_state)
summary(linearmodel_income)
coef(linearmodel_income)
gdp_percap <- function(population, gdp) {
gdp_percap = gdp/population
}
gdp_percap <- function(population, gdp) {
gdp_per_cap = gdp/population
return(gdp_per_cap)
}
gdp_percap(120,10)
gdp_percap(120,12000000)
honkong_gdp <- read.csv("./data/honkong_gdp.csv")
View(gdp_percap)
View(gdp_percap)
View(honkong_gdp)
View(linearmodel_income)
View(honkong_gdp)
gdp_percap(7536000, 382100000000)
variable_summary <- function(columnName){
if(typeof(columnName) == "Numeric"){
summary(columnName)
} else {
table(columnName)
}
}
variable_summary(dataset_state$Income)
iris
variable_summary(iris$Petal.Width)
variable_summary(iris$Species)
typeof(iris$Species)
classof(iris$Species)
classOf(iris$Species)
variable_summary <- function(columnName) {
# Check if the column is numeric
if (is.numeric(columnName)) {
summary(columnName)  # Summary for numeric columns
} else {
table(columnName)  # Frequency table for non-numeric columns (e.g., factors)
}
}
# Test with the Species column (which is a factor in the iris dataset)
variable_summary(iris$Species)
# Test with a numeric column (e.g., Sepal.Length in the iris dataset)
variable_summary(iris$Sepal.Length)
sotu_dataset <- read_csv("data/sotu.csv")
View(sotu_dataset)
str_detect(sotu_dataset$, "the state of the Union is not good")
sotu_dataset <- read_csv("data/sotu.csv")
str_detect(sotu_dataset$, "the state of the Union is not good")
str_detect(sotu_dataset, "the state of the Union is not good")
str_detect(sotu_dataset$text, "the state of the Union is not good")
name <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
name <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
name
name$name
name$name
name <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
sotu_dataset <- read_csv("data/sotu.csv")
sotu_dataset <- read_csv("data/sotu.csv")
install.packages("tidyverse")
library(tidyverse)
sotu_dataset <- read_csv("data/sotu.csv")
name <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
name$name
name <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
View(name)
name$text
sotu_dataset$contains_women <- ifelse(str_detect(sotu_dataset$text, "women"), TRUE, FALSE)
View(sotu_dataset)
#How many character until god
position <- str_locate(sotu_dataset$text, "god")
position
characters_until_god <- position[1] - 1
characters_until_god <- position[1] - 1
sotu_dataset$characters_till_god <-  position[1] - 1
View(sotu_dataset)
# Locate the position of "god" in each row of the text column
position <- str_locate(sotu_dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
sotu_dataset$characters_till_god <- start_positions - 1
View(sotu_dataset)
sotu_dataset$count_freedom <- srt_count(sotu_dataset$text, "freedom")
sotu_dataset$count_freedom <- str_count(sotu_dataset$text, "freedom")
View(sotu_dataset)
sotu_dataset$count_justice <- str_count(sotu_dataset$text, "justice")
View(sotu_dataset)
sotu_dataset$speech_length <- str_length(sotu_dataset$text)
View(sotu_dataset)
textAnalyser <- function(dataset) {
if ("text" %in% colnames(df)) {
#contains women
dataset$contains_women <- ifelse(str_detect(dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
dataset$count_freedom <- str_count(dataset$text, "freedom")
dataset$count_justice <- str_count(dataset$text, "justice")
dataset$speech_length <- str_length(dataset$text)
}
}
sotu_dataset <- read_csv("data/sotu.csv")
sotu_dataset2 <- sotu_dataset;
View(sotu_dataset2)
textAnalyser(sotu_dataset2)
View(sotu_dataset2)
textAnalyser(sotu_dataset2)
textAnalyser <- function(dataset) {
if ("text" %in% colnames(df)) {
#contains women
dataset$contains_women <- ifelse(str_detect(dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
dataset$count_freedom <- str_count(dataset$text, "freedom")
dataset$count_justice <- str_count(dataset$text, "justice")
dataset$speech_length <- str_length(dataset$text)
}
return(dataset)
}
textAnalyser(sotu_dataset2)
textAnalyser <- function(dataset) {
#contains women
dataset$contains_women <- ifelse(str_detect(dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
dataset$count_freedom <- str_count(dataset$text, "freedom")
dataset$count_justice <- str_count(dataset$text, "justice")
dataset$speech_length <- str_length(dataset$text)
return(dataset)
}
textAnalyser(sotu_dataset2)
sotu_dataset <- read_csv("data/sotu.csv")
sotu_dataset2 <- sotu_dataset;
textAnalyser <- function(dataset) {
if (text %in% colnames(df)) {
#contains women
dataset$contains_women <- ifelse(str_detect(dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
dataset$count_freedom <- str_count(dataset$text, "freedom")
dataset$count_justice <- str_count(dataset$text, "justice")
dataset$speech_length <- str_length(dataset$text)
}
return(dataset)
}
textAnalyser(sotu_dataset2)
textAnalyser <- function(dataset) {
if (`text` %in% colnames(df)) {
#contains women
dataset$contains_women <- ifelse(str_detect(dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
dataset$count_freedom <- str_count(dataset$text, "freedom")
dataset$count_justice <- str_count(dataset$text, "justice")
dataset$speech_length <- str_length(dataset$text)
}
return(dataset)
}
textAnalyser(sotu_dataset2)
textAnalyser <- function(dataset) {
if ("text" %in% colnames(dataset)) {
#contains women
dataset$contains_women <- ifelse(str_detect(dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
dataset$count_freedom <- str_count(dataset$text, "freedom")
dataset$count_justice <- str_count(dataset$text, "justice")
dataset$speech_length <- str_length(dataset$text)
}
return(dataset)
}
textAnalyser(sotu_dataset2)
View(dataset_state)
View(sotu_dataset2)
View(sotu_dataset)
View(sotu_dataset2)
sotu_dataset <- read_csv("data/sotu.csv")
name <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
name$text
name$name
#contains women
sotu_dataset$contains_women <- ifelse(str_detect(sotu_dataset$text, "women"), TRUE, FALSE)
# Locate the position of "god" in each row of the text column
position <- str_locate(sotu_dataset$text, "god")
# Extract the start positions (first column of the matrix)
start_positions <- position[, 1]
# Add a new column with characters till "god"
# Subtract 1 to exclude the starting character of "god"
sotu_dataset$characters_till_god <- start_positions - 1
#how many times does the word freedom exist in the text
sotu_dataset$count_freedom <- str_count(sotu_dataset$text, "freedom")
sotu_dataset$count_justice <- str_count(sotu_dataset$text, "justice")
sotu_dataset$speech_length <- str_length(sotu_dataset$text)
cor(sotu_dataset$count_freedom,sotu_dataset$count_justice)
cor(sotu_dataset$count_justice, sotu_dataset$count_freedom)
esquisse::esquisser()
long$count_freedom <- as.bigz(sotu_dataset$count_freedom)
# Verwende pivot_longer, um die Spalten in lange Form zu bringen
long <- sotu_dataset %>%
pivot_longer(cols = c(count_freedom, count_justice),
names_to = "variable",  # Die Spaltennamen werden in eine neue "variable"-Spalte verschoben
values_to = "values")   # Die Werte der Spalten werden in eine neue "values"-Spalte verschoben
# Ausgabe des neuen "long" Datensatzes
print(long_dataset)
# Verwende pivot_longer, um die Spalten in lange Form zu bringen
long <- sotu_dataset %>%
pivot_longer(cols = c(count_freedom, count_justice),
names_to = "variable",  # Die Spaltennamen werden in eine neue "variable"-Spalte verschoben
values_to = "values")   # Die Werte der Spalten werden in eine neue "values"-Spalte verschoben
# Ausgabe des neuen "long" Datensatzes
print(long)
View(long)
View(sotu_dataset)
esquisse::esquisser()
View(long)
esquisse::esquisser()
# Erstellung des Line-Plots
ggplot(long_dataset, aes(x = year, y = values, color = variable, group = variable)) +
geom_line(size = 1.2) +  # Linien-Plot
geom_point(size = 3) +    # Punkte an den Linien
labs(title = "Häufigkeit der Wörter 'Freedom' und 'Justice' nach Jahr",
x = "Jahr",
y = "Häufigkeit",
color = "Begriff") +
theme_minimal() +
scale_color_manual(values = c("blue", "red"))  # Farben für die Linien
# Erstellung des Line-Plots
ggplot(long, aes(x = year, y = values, color = variable, group = variable)) +
geom_line(size = 1.2) +  # Linien-Plot
geom_point(size = 3) +    # Punkte an den Linien
labs(title = "Häufigkeit der Wörter 'Freedom' und 'Justice' nach Jahr",
x = "Jahr",
y = "Häufigkeit",
color = "Begriff") +
theme_minimal() +
scale_color_manual(values = c("blue", "red"))  # Farben für die Linien
install.packages("tidyverse")
library(tidyverse)
dataset_state <- as.data.frame(state.x77)
cor(dataset_state$Income, dataset_state$`HS Grad`)
cor(dataset_state$Illiteracy, dataset_state$Murder)
View(dataset_state)
knitr::opts_chunk$set(echo = TRUE)
coef(linearmodel_income)
summary(linearmodel_income)
# Abhängige Varialbe: Income
# Unabhängige Variablen: Population, Life Exp, Illiteracy, Murder, HS Grad, Frost, Area
formula <- Income ~  Population +
Illiteracy +
`Life Exp` +
Murder     +
`HS Grad`  +
Frost      +
Area
linearmodel_income <-  lm(formula, data = dataset_state)
summary(linearmodel_income)
coef(linearmodel_income)
gdp_percap(population=84548231, gdp=4525703.90)
gdp_percap(7536000, 382100000000)
gdp_percap(population=84548231, gdp=4525703900000)
View(sotu_dataset2)
last_speech
last_speech <- sotu_dataset[nrow(sotu_dataset), c("year", "name")]
last_speech
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
dataset_state <- as.data.frame(state.x77)
cor(dataset_state$Income, dataset_state$`HS Grad`)
cor(dataset_state$Illiteracy, dataset_state$Murder)
# Abhängige Varialbe: Income
# Unabhängige Variablen: Population, Life Exp, Illiteracy, Murder, HS Grad, Frost, Area
formula <- Income ~  Population +
Illiteracy +
`Life Exp` +
Murder     +
`HS Grad`  +
Frost      +
Area
linearmodel_income <-  lm(formula, data = dataset_state)
summary(linearmodel_income)
coef(linearmodel_income)
# Funktion zur Berechnung des Bruttoinlandsprodukts pro Kopf
gdp_percap <- function(population, gdp) {
gdp_per_cap = gdp / population  # BIP pro Kopf berechnen
return(gdp_per_cap)  # Rückgabe des BIP pro Kopf
}
gdp_percap(population=84548231, gdp=4525703900000)
variable_summary <- function(columnName) {
# Check if the column is numeric
if (is.numeric(columnName)) {
summary(columnName)  # Summary for numeric columns
} else {
table(columnName)  # Frequency table for non-numeric columns (e.g., factors)
}
}
# Test with the Species column (which is a factor in the iris dataset)
variable_summary(iris$Species)
# Test with a numeric column (e.g., Sepal.Length in the iris dataset)
variable_summary(iris$Sepal.Length)
sotu_dataset <- read_csv("data/sotu.csv")
sotu_dataset_copy <- sotu_dataset;
# Einen Blick auf die ersten Zeilen werfen
head(sotu_dataset)
# Jahr und Name des Präsidenten für die erste und letzte Rede
first_speech <- sotu_dataset[1, c("year", "name")]
first_speech
presidentSpeech$name
presidentSpeech <- sotu_dataset %>% filter(str_detect(sotu_dataset$text, "the state of the Union is not good"))
presidentSpeech$name
cor(sotu_dataset$count_justice, sotu_dataset$count_freedom)
cor(sotu_dataset$count_justice, sotu_dataset$count_freedom)
# Create the plot
ggplot(sotu_dataset, aes(x = count_freedom, y = count_justice)) +
geom_jitter(color = "blue", alpha = 0.6, size = 2) +
labs(
x = "Anzahl des Wortes \"freedom\"",
y = "Anzahl des Wortes \"justice\"",
title = "Beziehung zwischen den Wörtern \"freedom\" und \"justice\"",
caption = "Datensatz der Rede"
) +
theme_gray(base_size = 14) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
plot.caption = element_text(size = 10, face = "italic", hjust = 1)
)
# Erstellung des Line-Plots
ggplot(long, aes(x = year, y = values, color = variable, group = variable)) +
geom_line(size = 1.2) +  # Linien-Plot
labs(
title = "Häufigkeit der Wörter 'Freedom' und 'Justice' nach Jahr",
subtitle = "Analyse basierend auf den State of the Union Reden",
x = "Jahr",
y = "Häufigkeit",
color = "Begriff"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, margin = margin(b = 10)),
legend.position = "top",
legend.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 12),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = c("blue", "red"),
labels = c("Freedom", "Justice")
)
# Erstellung des Line-Plots
ggplot(long, aes(x = year, y = values, color = variable, group = variable)) +
geom_line(size = 1.2) +  # Linien-Plot
labs(
title = "Häufigkeit der Wörter 'Freedom' und 'Justice' nach Jahr",
subtitle = "Analyse basierend auf den State of the Union Reden",
x = "Jahr",
y = "Häufigkeit",
color = "Begriff"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, margin = margin(b = 10)),
legend.position = "top",
legend.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 12),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = c("green", "pink"),
labels = c("Freedom", "Justice")
)
# Erstellung des Line-Plots
ggplot(long, aes(x = year, y = values, color = variable, group = variable)) +
geom_line(size = 1.2) +  # Linien-Plot
labs(
title = "Häufigkeit der Wörter 'Freedom' und 'Justice' nach Jahr",
subtitle = "Analyse basierend auf den State of the Union Reden",
x = "Jahr",
y = "Häufigkeit",
color = "Begriff"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.5, margin = margin(b = 10)),
legend.position = "top",
legend.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 12),
panel.grid.minor = element_blank()
) +
scale_color_manual(
values = c("green", "red"),
labels = c("Freedom", "Justice")
)
