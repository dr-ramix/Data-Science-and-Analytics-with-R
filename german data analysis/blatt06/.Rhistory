```
#install.packages("tidyverse")
```
most_viewed_video <- videos %>% slice_max(views, n = 1)
most_viewed_video <- videos %>% slice_max(views, n = 1)
videos <- read_csv("data/yt-videos.csv")
library(tidyverse)
videos <- read_csv("data/yt-videos.csv")
amount_of_uploaded_videos <- nrow(videos)
amount_of_uploaded_videos <- nrow(videos)
most_viewed_video <- videos %>% slice_max(views, n = 1)
View(most_viewed_video)
total_hours_watched_video <- round(sum(videos$watch_time_hours))
total_hours_watched_video <- round(sum(videos$watch_time_hours))
View(most_watched_video)
most_watched_video <- videos %>% slice_max(watch_time_hours, n = 1)
View(most_watched_video)
View(most_viewed_video)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(glue) # F√ºr sch√∂nere Ausgabeformatierung
# Professionelle Visualisierung
ggplot(daily_views_of_most_viewed, aes(x = date, y = views)) +
# Basis-Linie f√ºr t√§gliche Views
geom_line(color = "#112446", size = 1.2, alpha = 0.9) +
# Maximalen Punkt hervorheben
geom_point(data = max_point, aes(x = date, y = views),
color = "red", size = 4, shape = 21, fill = "yellow", stroke = 1.5) +
# Vertikale Linie f√ºr das Datum mit max. Views
geom_vline(xintercept = as.numeric(max_point$date),
linetype = "dashed", color = "gray40", size = 0.8) +
# Horizontale Linie f√ºr die maximale Anzahl der Views
geom_hline(yintercept = max_point$views,
linetype = "dotted", color = "gray40", size = 0.8) +
# Annotation f√ºr den h√∂chsten Punkt
annotate("text", x = max_point$date, y = max_point$views + 10,
label = paste("Max Views:", max_point$views),
color = "red", fontface = "bold", vjust = -0.5, size = 4.5) +
# Achsenbeschriftungen & Titel
labs(
title = "üìà Entwicklung der Views f√ºr das meistgesehene Video",
subtitle = "Oktober 2024 ‚Äì Januar 2025",
x = "Datum",
y = "Anzahl der Views",
caption = "Datenquelle: Vorlesung Statistische Software"
) +
# Anpassungen im Theme
theme_minimal(base_family = "Helvetica") +
theme(
plot.title = element_text(size = 15, face = "bold", color = "#112446"),
plot.subtitle = element_text(size = 12, face = "italic", color = "#444444"),
axis.title = element_text(size = 10, face = "bold"),
axis.text = element_text(size = 8, color = "#333333"),
plot.caption = element_text(size = 7, color = "gray50", hjust = 1),
panel.grid.major = element_line(color = "#E0E0E0"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#F9F9F9", color = NA),
panel.border = element_blank()
) +
# Formatierung der Datumsachse
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Professionelle Visualisierung
ggplot(daily_views_of_most_viewed, aes(x = date, y = views)) +
# Basis-Linie f√ºr t√§gliche Views
geom_line(color = "#112446", size = 1.2, alpha = 0.9) +
# Maximalen Punkt hervorheben
geom_point(data = max_point, aes(x = date, y = views),
color = "red", size = 2, shape = 21, fill = "yellow", stroke = 1.5) +
# Vertikale Linie f√ºr das Datum mit max. Views
geom_vline(xintercept = as.numeric(max_point$date),
linetype = "dashed", color = "gray40", size = 0.8) +
# Horizontale Linie f√ºr die maximale Anzahl der Views
geom_hline(yintercept = max_point$views,
linetype = "dotted", color = "gray40", size = 0.8) +
# Annotation f√ºr den h√∂chsten Punkt
annotate("text", x = max_point$date, y = max_point$views + 10,
label = paste("Max Views:", max_point$views),
color = "red", fontface = "bold", vjust = -0.5, size = 4.5) +
# Achsenbeschriftungen & Titel
labs(
title = "üìà Entwicklung der Views f√ºr das meistgesehene Video",
subtitle = "Oktober 2024 ‚Äì Januar 2025",
x = "Datum",
y = "Anzahl der Views",
caption = "Datenquelle: Vorlesung Statistische Software"
) +
# Anpassungen im Theme
theme_minimal(base_family = "Helvetica") +
theme(
plot.title = element_text(size = 15, face = "bold", color = "#112446"),
plot.subtitle = element_text(size = 12, face = "italic", color = "#444444"),
axis.title = element_text(size = 10, face = "bold"),
axis.text = element_text(size = 8, color = "#333333"),
plot.caption = element_text(size = 7, color = "gray50", hjust = 1),
panel.grid.major = element_line(color = "#E0E0E0"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#F9F9F9", color = NA),
panel.border = element_blank()
) +
# Formatierung der Datumsachse
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Professionelle Visualisierung
ggplot(daily_views_of_most_viewed, aes(x = date, y = views)) +
# Basis-Linie f√ºr t√§gliche Views
geom_line(color = "#112446", size = 1.2, alpha = 0.9) +
# Maximalen Punkt hervorheben
geom_point(data = max_point, aes(x = date, y = views),
color = "red", size = 2, shape = 21, fill = "yellow", stroke = 1.5) +
# Vertikale Linie f√ºr das Datum mit max. Views
geom_vline(xintercept = as.numeric(max_point$date),
linetype = "dashed", color = "gray40", size = 0.8) +
# Horizontale Linie f√ºr die maximale Anzahl der Views
geom_hline(yintercept = max_point$views,
linetype = "dotted", color = "gray40", size = 0.8) +
# Annotation f√ºr den h√∂chsten Punkt
annotate("text", x = max_point$date, y = max_point$views + 10,
label = paste("Max Views:", max_point$views),
color = "red", fontface = "bold", vjust = -0.5, size = 3.5) +
# Achsenbeschriftungen & Titel
labs(
title = "üìà Entwicklung der Views f√ºr das meistgesehene Video",
subtitle = "Oktober 2024 ‚Äì Januar 2025",
x = "Datum",
y = "Anzahl der Views",
caption = "Datenquelle: Vorlesung Statistische Software"
) +
# Anpassungen im Theme
theme_minimal(base_family = "Helvetica") +
theme(
plot.title = element_text(size = 15, face = "bold", color = "#112446"),
plot.subtitle = element_text(size = 12, face = "italic", color = "#444444"),
axis.title = element_text(size = 10, face = "bold"),
axis.text = element_text(size = 8, color = "#333333"),
plot.caption = element_text(size = 7, color = "gray50", hjust = 1),
panel.grid.major = element_line(color = "#E0E0E0"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#F9F9F9", color = NA),
panel.border = element_blank()
) +
# Formatierung der Datumsachse
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Data Wrangling
weather_long <- weather %>% pivot_longer(
cols = c(temperature_2m_max_c, temperature_2m_min_c, temperature_2m_mean_c),
names_to = "type",
values_to = "temperature") %>% mutate(
type = case_when(
type == "temperature_2m_max_c"  ~ "Max.",
type == "temperature_2m_min_c"  ~ "Min.",
type == "temperature_2m_mean_c" ~ "Durchschnitt",
TRUE ~ type
)
)
weather <- weather %>%
clean_names()
weather <- read_delim("Data/weatherdata-2024.csv", delim = ",", skip = 2)
weather <- weather %>%
clean_names()
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
install.packages("janitor")
install.packages("janitor")
library(janitor)
library(janitor)
library(janitor)
library(janitor)
---
title: "Blatt06"
install.packages("janitor")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(glue) # F√ºr sch√∂nere Ausgabeformatierung
#install.packages("janitor")
library(janitor)
weather <- weather %>%
clean_names()
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Data Wrangling
weather_long <- weather %>% pivot_longer(
cols = c(temperature_2m_max_c, temperature_2m_min_c, temperature_2m_mean_c),
names_to = "type",
values_to = "temperature") %>% mutate(
type = case_when(
type == "temperature_2m_max_c"  ~ "Max.",
type == "temperature_2m_min_c"  ~ "Min.",
type == "temperature_2m_mean_c" ~ "Durchschnitt",
TRUE ~ type
)
)
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b", date_breaks = "1 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "3 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung 2024",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten 2024"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
) +
scale_x_date(date_labels = "%b %Y", date_breaks = "2 month")
# Plot
ggplot(
data = weather_long,
mapping = aes(
x = time,
y = temperature,
color = type
)
) +
geom_point(alpha = 0.7, size = 2) +  # Punkte f√ºr Temperaturen
scale_color_manual(values = c("#1f77b4", "#ff7f0e", "#2ca02c"),  # Blaue, orange und gr√ºne Farbskala
labels = c("Min. Temperatur", "Max. Temperatur", "Durchschnitt")) +
labs(
title = "üå° T√§gliche Temperaturentwicklung",
subtitle = "Minimale, maximale und durchschnittliche Temperatur",
x = "Datum",
y = "Temperatur (¬∞C)",
color = "Temperaturart",
caption = "Datenquelle: Wetterdaten"
) +
theme_minimal(base_family = "Helvetica") +
theme(
legend.position = "top",
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, face = "italic"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10)
)
glue("Das am l√§ngsten geschaute Video: {most_watched_video$video_title} mit {most_watched_video$watch_time_hours} Stunden Watch-Time.")
glue("Das am l√§ngsten geschaute Video: {most_watched_video$video_title} mit {most_watched_video_time_hours} Stunden Watch-Time.")
most_watched_video_time_hours <- round(most_watched_video$watch_time_hours)
glue("Das am l√§ngsten geschaute Video: {most_watched_video$video_title} mit {most_watched_video_time_hours} Stunden Watch-Time.")
weather <- weather %>%
clean_names()
weather <- weather %>%
clean_names()
weather <- weather %>%
clean_names()
weather <- weather %>%
clean_names()
weather <- weather %>%
clean_names()
weather <- read_csv("data/weatherdata-2024.csv")
#install.packages("janitor")
library(janitor)
weather <- read_csv("data/weatherdata-2024.csv")
#install.packages("janitor")
library(janitor)
weather <- read_csv("data/weatherdata-2024.csv")
#install.packages("janitor")
library(janitor)
weather <- weather %>%
clean_names()
# Data Wrangling
weather_long <- weather %>% pivot_longer(
cols = c(temperature_2m_max_c, temperature_2m_min_c, temperature_2m_mean_c),
names_to = "type",
values_to = "temperature") %>% mutate(
type = case_when(
type == "temperature_2m_max_c"  ~ "Max.",
type == "temperature_2m_min_c"  ~ "Min.",
type == "temperature_2m_mean_c" ~ "Durchschnitt",
TRUE ~ type
)
)
